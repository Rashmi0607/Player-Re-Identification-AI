(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const r of n.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function e(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(i){if(i.ep)return;i.ep=!0;const n=e(i);fetch(i.href,n)}})();class b{constructor(){this.players=new Map,this.nextPlayerId=1,this.playerHistory=[],this.maxDistance=100,this.reidentificationThreshold=.7,this.framesSinceLastSeen=new Map,this.maxFramesBeforeRemoval=30}reset(){this.players.clear(),this.nextPlayerId=1,this.playerHistory=[],this.framesSinceLastSeen.clear()}updateTracking(t,e){const s=[],i=new Set;for(const[n,r]of this.players){let o=null,a=1/0,c=-1;if(t.forEach((l,d)=>{if(i.has(d))return;const h=this.calculateDistance(r.lastPosition,[l.x,l.y]),f=this.calculateFeatureSimilarity(r.features,l.features),y=h*.6+(1-f)*100*.4;y<a&&h<this.maxDistance&&(a=y,o=l,c=d)}),o)i.add(c),this.updatePlayer(n,o,e),s.push({id:n,bbox:{x:o.x,y:o.y,width:o.width,height:o.height},confidence:o.confidence,status:"tracked"}),this.framesSinceLastSeen.set(n,0);else{const l=this.framesSinceLastSeen.get(n)||0;this.framesSinceLastSeen.set(n,l+1),l>this.maxFramesBeforeRemoval&&(this.players.delete(n),this.framesSinceLastSeen.delete(n))}}return t.forEach((n,r)=>{if(i.has(r))return;const o=this.attemptReidentification(n);if(o)this.updatePlayer(o.id,n,e),s.push({id:o.id,bbox:{x:n.x,y:n.y,width:n.width,height:n.height},confidence:n.confidence,status:"reidentified"}),this.framesSinceLastSeen.set(o.id,0),this.playerHistory.push({playerId:o.id,action:"reidentified",time:e,position:[n.x,n.y]});else{const a=this.nextPlayerId++;this.createNewPlayer(a,n,e),s.push({id:a,bbox:{x:n.x,y:n.y,width:n.width,height:n.height},confidence:n.confidence,status:"new"}),this.framesSinceLastSeen.set(a,0),this.playerHistory.push({playerId:a,action:"first_detected",time:e,position:[n.x,n.y]})}}),s}createNewPlayer(t,e,s){this.players.set(t,{id:t,firstSeen:s,lastSeen:s,lastPosition:[e.x,e.y],features:{...e.features},trackingHistory:[{time:s,position:[e.x,e.y],confidence:e.confidence}]})}updatePlayer(t,e,s){const i=this.players.get(t);i&&(i.lastSeen=s,i.lastPosition=[e.x,e.y],this.updateFeatures(i.features,e.features,.3),i.trackingHistory.push({time:s,position:[e.x,e.y],confidence:e.confidence}),i.trackingHistory.length>50&&(i.trackingHistory=i.trackingHistory.slice(-50)))}attemptReidentification(t){let e=null,s=0;for(const[i,n]of this.players){const r=this.calculateFeatureSimilarity(n.features,t.features);r>s&&r>this.reidentificationThreshold&&(s=r,e=n)}return e}calculateDistance(t,e){const s=t[0]-e[0],i=t[1]-e[1];return Math.sqrt(s*s+i*i)}calculateFeatureSimilarity(t,e){const s=this.calculateColorSimilarity(t.dominantColor,e.dominantColor),i=Math.abs(t.size-e.size),n=Math.max(0,1-i),r=Math.abs(t.aspectRatio-e.aspectRatio),o=Math.max(0,1-r*2);return s*.5+n*.3+o*.2}calculateColorSimilarity(t,e){const s=Math.abs(t[0]-e[0])/255,i=Math.abs(t[1]-e[1])/255,n=Math.abs(t[2]-e[2])/255;return 1-(s+i+n)/3}updateFeatures(t,e,s){t.size=t.size*(1-s)+e.size*s,t.aspectRatio=t.aspectRatio*(1-s)+e.aspectRatio*s;for(let i=0;i<3;i++)t.dominantColor[i]=t.dominantColor[i]*(1-s)+e.dominantColor[i]*s}getStats(){const t=this.nextPlayerId-1,e=this.players.size,s=this.playerHistory.filter(o=>o.action==="reidentified").length,i=this.playerHistory.length,n=this.playerHistory.filter(o=>o.action!=="lost").length,r=i>0?(n/i*100).toFixed(1):0;return{totalPlayers:t,activePlayers:e,reidentifications:s,accuracy:r}}getPlayerHistory(){var s;const t=new Map;this.playerHistory.forEach(i=>{t.has(i.playerId)||t.set(i.playerId,[]),t.get(i.playerId).push(i)});const e=[];for(const[i,n]of t){const r=this.players.get(i),o=n[n.length-1];e.push({id:i,firstSeen:((s=n[0])==null?void 0:s.time)||0,lastSeen:(r==null?void 0:r.lastSeen)||(o==null?void 0:o.time)||0,totalDetections:n.length,reidentifications:n.filter(a=>a.action==="reidentified").length,status:this.players.has(i)?"active":"inactive"})}return e.sort((i,n)=>i.id-n.id)}}class P{constructor(){this.canvas=null,this.ctx=null,this.isProcessing=!1}initialize(t){this.canvas=t,this.ctx=t.getContext("2d")}async extractFrame(t,e){return new Promise(s=>{t.currentTime=e,t.addEventListener("seeked",()=>{if(this.canvas&&this.ctx){this.canvas.width=t.videoWidth,this.canvas.height=t.videoHeight,this.ctx.drawImage(t,0,0);const i=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height);s(i)}},{once:!0})})}preprocessFrame(t){const e=t.data;for(let s=0;s<e.length;s+=4)e[s]=Math.min(255,e[s]*1.1),e[s+1]=Math.min(255,e[s+1]*1.1),e[s+2]=Math.min(255,e[s+2]*1.1);return t}extractColorHistogram(t,e,s,i,n){const r=t.data,o=t.width,a={r:new Array(256).fill(0),g:new Array(256).fill(0),b:new Array(256).fill(0)};let c=0;for(let l=s;l<s+n&&l<t.height;l++)for(let d=e;d<e+i&&d<o;d++){const h=(l*o+d)*4;h<r.length&&(a.r[r[h]]++,a.g[r[h+1]]++,a.b[r[h+2]]++,c++)}if(c>0)for(let l=0;l<256;l++)a.r[l]/=c,a.g[l]/=c,a.b[l]/=c;return a}getDominantColor(t,e,s,i,n){const r=t.data,o=t.width;let a=0,c=0,l=0,d=0;for(let h=s;h<s+n&&h<t.height;h++)for(let f=e;f<e+i&&f<o;f++){const y=(h*o+f)*4;y<r.length&&(a+=r[y],c+=r[y+1],l+=r[y+2],d++)}return d>0?[Math.round(a/d),Math.round(c/d),Math.round(l/d)]:[0,0,0]}calculateOpticalFlow(t,e){const s=[];for(let r=0;r<e.height-16;r+=16)for(let o=0;o<e.width-16;o+=16){const a=this.findBestMatch(t,e,o,r,16,8);s.push({x:o+16/2,y:r+16/2,dx:a.dx,dy:a.dy,confidence:a.confidence})}return s}findBestMatch(t,e,s,i,n,r){let o=0,a=0,c=1/0;for(let l=-r;l<=r;l++)for(let d=-r;d<=r;d++){const h=this.calculateBlockError(t,e,s,i,s+d,i+l,n);h<c&&(c=h,o=d,a=l)}return{dx:o,dy:a,confidence:1/(1+c/1e3)}}calculateBlockError(t,e,s,i,n,r,o){let a=0,c=0;for(let l=0;l<o;l++)for(let d=0;d<o;d++){const h=s+d,f=i+l,y=n+d,u=r+l;if(h>=0&&f>=0&&h<t.width&&f<t.height&&y>=0&&u>=0&&y<e.width&&u<e.height){const p=(f*t.width+h)*4,g=(u*e.width+y)*4,x=(t.data[p]+t.data[p+1]+t.data[p+2])/3,v=(e.data[g]+e.data[g+1]+e.data[g+2])/3;a+=Math.abs(x-v),c++}}return c>0?a/c:1/0}applyGaussianBlur(t,e=1){const s=new Uint8ClampedArray(t.data),i=t.width,n=t.height;for(let r=0;r<3;r++)for(let o=0;o<n;o++)for(let a=0;a<i;a++){let c=0,l=0;for(let h=-e;h<=e;h++)for(let f=-e;f<=e;f++){const y=a+f,u=o+h;if(y>=0&&u>=0&&y<i&&u<n){const p=(u*i+y)*4+r;c+=s[p],l++}}const d=(o*i+a)*4+r;t.data[d]=c/l}return t}}class E{constructor(){this.progressFill=document.getElementById("progressFill"),this.progressText=document.getElementById("progressText"),this.playersDetected=document.getElementById("playersDetected"),this.reidentifications=document.getElementById("reidentifications"),this.trackingAccuracy=document.getElementById("trackingAccuracy"),this.playerHistory=document.getElementById("playerHistory")}updateProgress(t,e){this.progressFill&&(this.progressFill.style.width=`${t}%`),this.progressText&&(this.progressText.textContent=e)}updateStats(t){this.playersDetected&&this.animateNumber(this.playersDetected,t.totalPlayers),this.reidentifications&&this.animateNumber(this.reidentifications,t.reidentifications),this.trackingAccuracy&&(this.trackingAccuracy.textContent=`${t.accuracy}%`)}updatePlayerHistory(t){this.playerHistory&&(this.playerHistory.innerHTML="",t.forEach(e=>{const s=this.createPlayerHistoryElement(e);this.playerHistory.appendChild(s)}))}createPlayerHistoryElement(t){const e=document.createElement("div");e.className="player-entry";const s=["#FF6B6B","#4ECDC4","#45B7D1","#96CEB4","#FFEAA7","#DDA0DD","#98D8C8","#F7DC6F","#BB8FCE","#85C1E9"],i=s[t.id%s.length];return e.innerHTML=`
            <div class="player-id" style="background-color: ${i}">
                ${t.id}
            </div>
            <div class="player-info">
                <div class="player-name">Player ${t.id}</div>
                <div class="player-status">
                    ${t.status==="active"?"ðŸŸ¢ Active":"ðŸ”´ Inactive"} â€¢ 
                    ${t.totalDetections} detections â€¢ 
                    ${t.reidentifications} re-IDs
                </div>
            </div>
        `,e}animateNumber(t,e){const s=parseInt(t.textContent)||0,i=e>s?1:-1,n=500,r=Math.abs(e-s),o=r>0?n/r:0;if(r===0)return;let a=s;const c=setInterval(()=>{a+=i,t.textContent=a,a===e&&clearInterval(c)},o)}showNotification(t,e="info"){const s=document.createElement("div");s.className=`notification notification-${e}`,s.textContent=t,Object.assign(s.style,{position:"fixed",top:"20px",right:"20px",padding:"15px 20px",borderRadius:"8px",color:"white",fontWeight:"600",zIndex:"1000",transform:"translateX(100%)",transition:"transform 0.3s ease"});const i={info:"#3498db",success:"#27ae60",warning:"#f39c12",error:"#e74c3c"};s.style.backgroundColor=i[e]||i.info,document.body.appendChild(s),setTimeout(()=>{s.style.transform="translateX(0)"},100),setTimeout(()=>{s.style.transform="translateX(100%)",setTimeout(()=>{s.parentNode&&s.parentNode.removeChild(s)},300)},3e3)}updateVideoInfo(t){const e=document.getElementById("videoInfo");if(!e)return;const s=(t.size/(1024*1024)).toFixed(2),i=t.duration||"Unknown";e.innerHTML=`
            <div class="video-info-card">
                <h4>ðŸ“¹ Video Information</h4>
                <div class="info-grid">
                    <div class="info-item">
                        <span class="info-label">File Name:</span>
                        <span class="info-value">${t.name}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">File Size:</span>
                        <span class="info-value">${s} MB</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Duration:</span>
                        <span class="info-value">${i}s</span>
                    </div>
                </div>
            </div>
        `}highlightActivePlayer(t){this.playerHistory.querySelectorAll(".player-entry").forEach(s=>{const i=s.querySelector(".player-id");parseInt(i.textContent)===t?(s.style.backgroundColor="#f0f8ff",s.style.transform="scale(1.02)",s.style.boxShadow="0 4px 12px rgba(0,0,0,0.15)"):(s.style.backgroundColor="",s.style.transform="",s.style.boxShadow="")})}createLoadingSpinner(){const t=document.createElement("div");t.className="loading-spinner",t.innerHTML=`
            <div class="spinner-circle"></div>
            <div class="spinner-text">Processing video...</div>
        `;const e=document.createElement("style");return e.textContent=`
            .loading-spinner {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                padding: 40px;
            }
            
            .spinner-circle {
                width: 40px;
                height: 40px;
                border: 4px solid #f3f3f3;
                border-top: 4px solid #667eea;
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin-bottom: 15px;
            }
            
            .spinner-text {
                color: #718096;
                font-size: 0.9rem;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `,document.querySelector("style[data-spinner]")||(e.setAttribute("data-spinner","true"),document.head.appendChild(e)),t}}class S{constructor(){this.videoProcessor=new P,this.playerTracker=new b,this.uiController=new E,this.isProcessing=!1,this.currentVideo=null,this.initializeEventListeners()}initializeEventListeners(){const t=document.getElementById("videoInput"),e=document.getElementById("processBtn"),s=document.getElementById("pauseBtn"),i=document.getElementById("resetBtn");t.addEventListener("change",n=>this.handleVideoUpload(n)),e.addEventListener("click",()=>this.startProcessing()),s.addEventListener("click",()=>this.pauseProcessing()),i.addEventListener("click",()=>this.resetProcessing())}async handleVideoUpload(t){const e=t.target.files[0];if(!e)return;if(!e.type.startsWith("video/")){alert("Please select a valid video file");return}this.currentVideo=e;const s=document.getElementById("videoPlayer"),i=URL.createObjectURL(e);s.src=i,document.getElementById("processingSection").style.display="block";const n=document.getElementById("outputCanvas"),r=n.getContext("2d");s.addEventListener("loadedmetadata",()=>{n.width=s.videoWidth,n.height=s.videoHeight,r.drawImage(s,0,0,n.width,n.height)}),this.uiController.updateProgress(0,"Video loaded successfully")}async startProcessing(){if(!this.currentVideo||this.isProcessing)return;this.isProcessing=!0;const t=document.getElementById("processBtn"),e=document.getElementById("pauseBtn");t.disabled=!0,e.disabled=!1;try{await this.processVideo()}catch(s){console.error("Processing error:",s),this.uiController.updateProgress(0,"Processing failed")}finally{this.isProcessing=!1,t.disabled=!1,e.disabled=!0}}async processVideo(){const t=document.getElementById("videoPlayer"),e=document.getElementById("outputCanvas"),s=e.getContext("2d");this.playerTracker.reset(),document.getElementById("resultsSection").style.display="block";const i=t.duration,n=30,r=Math.floor(i*n);let o=0;const a=async()=>{if(!this.isProcessing)return;const c=o/n;t.currentTime=c,await new Promise(f=>{const y=()=>{t.removeEventListener("seeked",y),f()};t.addEventListener("seeked",y)}),s.drawImage(t,0,0,e.width,e.height),s.getImageData(0,0,e.width,e.height);const l=this.simulatePlayerDetection(o,e.width,e.height),d=this.playerTracker.updateTracking(l,c);this.drawTrackingResults(s,d);const h=o/r*100;this.uiController.updateProgress(h,`Processing frame ${o}/${r}`),this.uiController.updateStats(this.playerTracker.getStats()),this.uiController.updatePlayerHistory(this.playerTracker.getPlayerHistory()),o++,o<r&&this.isProcessing?setTimeout(a,50):this.uiController.updateProgress(100,"Processing complete")};a()}simulatePlayerDetection(t,e,s){const i=[],n=6+Math.floor(Math.random()*4);for(let r=0;r<n;r++){const o=r*e/n+t*2%e,a=s*.3+Math.sin(t*.1+r)*s*.4,c=Math.max(0,Math.min(e-50,o+(Math.random()-.5)*20)),l=Math.max(0,Math.min(s-80,a+(Math.random()-.5)*20));Math.random()>.1&&i.push({x:c,y:l,width:40+Math.random()*20,height:60+Math.random()*20,confidence:.7+Math.random()*.3,features:this.extractSimulatedFeatures(c,l,r)})}return i}extractSimulatedFeatures(t,e,s){const i=[[255,0,0],[0,255,0],[0,0,255],[255,255,0],[255,0,255],[0,255,255],[255,128,0],[128,0,255],[255,192,203],[165,42,42]];return{dominantColor:i[s%i.length],position:[t,e],size:Math.random()*.5+.75,aspectRatio:.6+Math.random()*.2}}drawTrackingResults(t,e){e.forEach(s=>{const{id:i,bbox:n,confidence:r,status:o}=s,a=["#FF6B6B","#4ECDC4","#45B7D1","#96CEB4","#FFEAA7","#DDA0DD","#98D8C8","#F7DC6F","#BB8FCE","#85C1E9"],c=a[i%a.length];t.strokeStyle=c,t.lineWidth=3,t.strokeRect(n.x,n.y,n.width,n.height),t.fillStyle=c,t.font="bold 16px Arial",t.fillRect(n.x,n.y-25,60,25),t.fillStyle="white",t.fillText(`P${i}`,n.x+5,n.y-8),t.fillStyle=c,t.font="12px Arial",t.fillText(`${(r*100).toFixed(0)}%`,n.x+n.width-35,n.y-8),o==="reidentified"&&(t.fillStyle="#27AE60",t.beginPath(),t.arc(n.x+n.width-10,n.y+10,5,0,2*Math.PI),t.fill())})}pauseProcessing(){this.isProcessing=!1,document.getElementById("processBtn").disabled=!1,document.getElementById("pauseBtn").disabled=!0}resetProcessing(){this.isProcessing=!1,this.playerTracker.reset(),document.getElementById("processBtn").disabled=!1,document.getElementById("pauseBtn").disabled=!0,document.getElementById("resultsSection").style.display="none",this.uiController.updateProgress(0,"Ready to process");const t=document.getElementById("outputCanvas");t.getContext("2d").clearRect(0,0,t.width,t.height)}}document.addEventListener("DOMContentLoaded",()=>{new S});
